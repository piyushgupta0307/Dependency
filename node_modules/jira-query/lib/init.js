'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = init;

var _prompt = require('prompt');

var _prompt2 = _interopRequireDefault(_prompt);

var _auth = require('./auth');

var _jira = require('./jira');

var _config = require('./config');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; } // @init
/**
* init loads config from rc files, prompts user for missing info,
* and sets variables for url and credentials
*/


// resolves once we have all the required info,
// either from config file or user
function init() {
  return new Promise(function (resolve, reject) {
    var _properties;

    var config = (0, _config.getConfig)();
    var properties = (_properties = {}, _defineProperty(_properties, 'jira-url', {
      description: 'Jira url',
      required: true
    }), _defineProperty(_properties, 'username', {
      description: 'Jira username',
      required: true
    }), _defineProperty(_properties, 'password', {
      description: 'Jira password',
      required: true,
      hidden: true
    }), _properties);

    // Delete those we got from the config.
    if (config) {
      Object.keys(config).map(function (key) {
        delete properties[key];
      });
    }

    // Prompt for remaining properties.
    if (Object.keys(properties).length) {
      _prompt2.default.message = '';
      var schema = { properties: properties };

      _prompt2.default.start();
      _prompt2.default.get(schema, function (err, result) {
        return err ? reject(err) : resolve(function () {
          var username = config && config.username || result.username;
          var password = config && config.password || result.password;
          var jiraUrl = config && config['jira-url'] || result['jira-url'];
          (0, _auth.setCredentials)(username, password);
          (0, _jira.setUrl)(jiraUrl);
        }());
      });
    } else {
      (0, _auth.setCredentials)(config.username, config.password);
      (0, _jira.setUrl)(config['jira-url']);
      resolve();
    }
  });
}